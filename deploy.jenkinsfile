#!/usr/bin/env groovy
@Library("pipeline@release/2.x") _
import com.indeed.pipeline.OrcEnvironment
 
script = this
 
bootstrap(script) {
    // GitLab repository URL (e.g. git@code.corp.indeed.com:indeedone/indeedone-central.git)
    gitConfig.gitUrl = "git@code.corp.indeed.com:delivery/jiraactions.git"
    // Main development branch (e.g. master or develop). Note: if you put develop here, master will be ignored
    // by the pipeline (and vice versa). A branch called "production" will contain the latest code in prod
    // regardless of what is here, so you might consider using master for development instead of develop.
    // Note: if you change your branching scheme, you might want to change the branch names in your repo.cfg too.
    gitConfig.gitBranch = "master"
    // JIRA project where deploy tickets should be created (e.g. ONEC)
    jiraConfig.jiraProjectKey = "JAI"
    // Path to the deployable generated by the ant command (e.g. dist/indeedone-central.tar.gz)
    buildConfig.deployablePath = "dist/jiraactions.tar.gz"
    // Jenkins will send an email when there is a new build available to the following list of comma-separated addresses (e.g. one@indeed.com)
    config.newBuildAvailableEmailList = "kbinswanger@indeed.com"
    // Jenkins will send an email if the build fails to the following list of comma-separated addresses and everyone who committed since the last successful build (e.g. one@indeed.com)
    config.failureEmailList = config.newBuildAvailableEmailList
    // Product group (e.g. indeedone)
    config.productGroup = "jobsearch"
    // This should be true to build in Docker, which is recommended
    config.buildInDocker = true
    // Don't send "Your changes in delivery--jiraactions triggered a Pipeline build" e-mails
    config.sendEmailsToCommitAuthors = false

    // A list of URLs of your current version in QA and stage
    config.currentVersionUrlList = []
    config.versionCheckRetries = 10
    config.versionCheckSleepIntervalSeconds = 15

    // A list of URLs of your healthchecks in QA and stage
    config.healthCheckUrlList = []
    config.healthCheckRetries = 10
    config.healthCheckSleepIntervalSeconds = 5

    // A list of URLs of your current version in prod
    config.currentProdVersionUrlList = []

    // Set true to fail the build if verification instructions are not provided in annotated git tags for each issue
    config.requireVerificationInstructions = false

    // Set true to enable Slack notifications
    slackConfig.enable = false
    slackConfig.channel = "#channel-name"
}
 
buildPipeline(script) {
    createDeployable(script) {
        // Ant, JDK 8, Python 2, and Node 6 are already installed on the docker image.
        buildInDockerContainer(script) {
            // This is the ant command you use to build and test your deployable
            //dockerSh "ant clean test test-bundle testability-report distribute"
            dockerSh "ant clean test distribute"
        }
        step([$class: 'JacocoPublisher'])
    }
 
    approveQaDeploy(script)
 
    deployToQa(script) {
        uploadToArc(script)
    }

    def orcCredentialsId = "jobsearch-orc-key"
    def today = Calendar.getInstance()
    today.clearTime()
    def yesterday = today.previous()
    def dayBefore = yesterday.previous()
 
    Map<String, Closure> orcTasksToRun = [:]
    def orcTaskNames = [
        "JiraActionsIndexBuilderCommandLineTool",
        "JiraActionsIndexBuilderCommandLineTool-mecha"
    ]

    orcTaskNames.each { orcTaskName ->
        orcTasksToRun.put(
            orcTaskName,
            {
                runOrcTask(
                        script,
                        templateName: orcTaskName,
                        environment: OrcEnvironment.QA,
                        templateOwner: config.productGroup,
                        startDate: dayBefore,
                        endDate: yesterday,
                        apiKeyCredentialId: orcCredentialsId,
                        waitForActiveTasks: false
                )
            }
        )
    }
    parallel orcTasksToRun

    // Include this block to allow inputting your verification notes directly from the stage view. The notes will be posted to the deploy ticket.
    pipelineStage(script, "INPUT VERIFICATION NOTES") {
        inputVerificationNotes(script, message: "Input verification notes", abortMessage: "Input verification notes for why you are aborting this build", timeout:365)
    }
 
    deployToProd(script) {
        changeArcLabel(script)
    }
}
